"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Brain, FileSearch, PenTool, Shield, CheckCircle, Clock, RotateCcw, Eye } from "lucide-react"
import type { UploadedFile, ExtractedMetadata } from "@/app/author/upload/page"

interface AnalysisStepProps {
  file: UploadedFile
  metadata: ExtractedMetadata
  onComplete: (reviewId: string) => void
  onStartOver: () => void
}

interface AnalysisStage {
  id: string
  name: string
  description: string
  icon: React.ReactNode
  estimatedTime: string
  status: "pending" | "processing" | "completed"
}

export default function AnalysisStep({ file, metadata, onComplete, onStartOver }: AnalysisStepProps) {
  const [currentStageIndex, setCurrentStageIndex] = useState(0)
  const [progress, setProgress] = useState(0)
  const [isComplete, setIsComplete] = useState(false)
  const [analysisResults, setAnalysisResults] = useState<any>(null)

  const analysisStages: AnalysisStage[] = [
    {
      id: "preprocessing",
      name: "Text Preprocessing",
      description: "Extracting and preparing text content for analysis",
      icon: <FileSearch className="h-5 w-5" />,
      estimatedTime: "30 seconds",
      status: "pending",
    },
    {
      id: "plagiarism",
      name: "Plagiarism Detection",
      description: "Scanning against extensive database for originality check",
      icon: <Shield className="h-5 w-5" />,
      estimatedTime: "45 seconds",
      status: "pending",
    },
    {
      id: "quality",
      name: "Quality Assessment",
      description: "Analyzing writing quality, structure, and style",
      icon: <Brain className="h-5 w-5" />,
      estimatedTime: "60 seconds",
      status: "pending",
    },
    {
      id: "content",
      name: "Content Generation",
      description: "Creating summaries, blurbs, and recommendations",
      icon: <PenTool className="h-5 w-5" />,
      estimatedTime: "30 seconds",
      status: "pending",
    },
  ]

  const [stages, setStages] = useState(analysisStages)

  useEffect(() => {
    const timer = setInterval(() => {
      setProgress((prev) => {
        const newProgress = prev + 1

        // Update stage status based on progress
        const stageProgress = newProgress / 25 // Each stage takes ~25% of progress
        const newCurrentStage = Math.floor(stageProgress)

        if (newCurrentStage !== currentStageIndex && newCurrentStage < stages.length) {
          setCurrentStageIndex(newCurrentStage)

          // Update stages status
          setStages((prevStages) =>
            prevStages.map((stage, index) => ({
              ...stage,
              status: index < newCurrentStage ? "completed" : index === newCurrentStage ? "processing" : "pending",
            })),
          )
        }

        // Complete analysis at 100%
        if (newProgress >= 100) {
          clearInterval(timer)
          setIsComplete(true)

          // Mark all stages as completed
          setStages((prevStages) => prevStages.map((stage) => ({ ...stage, status: "completed" as const })))

          // Set mock analysis results
          setAnalysisResults({
            qualityScore: 92,
            plagiarismScore: 2,
            reviewId: "1", // This would be generated by the backend
          })

          return 100
        }

        return newProgress
      })
    }, 200) // Update every 200ms for smooth progress

    return () => clearInterval(timer)
  }, [currentStageIndex, stages.length])

  const handleViewResults = () => {
    if (analysisResults) {
      onComplete(analysisResults.reviewId)
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "completed":
        return <CheckCircle className="h-5 w-5 text-green-600" />
      case "processing":
        return <Clock className="h-5 w-5 text-[#F79B72] animate-spin" />
      default:
        return <Clock className="h-5 w-5 text-gray-400" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "completed":
        return "text-green-600"
      case "processing":
        return "text-[#F79B72]"
      default:
        return "text-gray-500"
    }
  }

  return (
    <div className="space-y-6">
      {/* Analysis Header */}
      <Card>
        <CardContent className="p-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-[#2A4759] mb-2">
              {isComplete ? "Analysis Complete!" : "Analyzing Your Manuscript"}
            </h2>
            <p className="text-gray-600 mb-4">
              {isComplete
                ? "Your AI review is ready for viewing."
                : "Our AI is carefully reviewing your manuscript. This process typically takes 2-3 minutes."}
            </p>

            {!isComplete && (
              <div className="max-w-md mx-auto">
                <Progress value={progress} className="h-3 mb-2" />
                <div className="text-sm text-gray-500">{Math.round(progress)}% complete</div>
              </div>
            )}

            {isComplete && (
              <Button
                onClick={() => {
                  const resultsSection = document.querySelector(".results-preview")
                  if (resultsSection) {
                    resultsSection.scrollIntoView({ behavior: "smooth" })
                  }
                }}
                className="bg-[#F79B72] hover:bg-[#e68a61] text-white mt-4"
              >
                Go to Results
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* File Information */}
      <Card>
        <CardHeader>
          <CardTitle className="text-[#2A4759]">Manuscript Details</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <div className="font-medium text-gray-700">Title</div>
              <div className="text-gray-600">{metadata.title}</div>
            </div>
            <div>
              <div className="font-medium text-gray-700">Author</div>
              <div className="text-gray-600">{metadata.author}</div>
            </div>
            <div>
              <div className="font-medium text-gray-700">Language</div>
              <div className="text-gray-600">{metadata.language.toUpperCase()}</div>
            </div>
            <div>
              <div className="font-medium text-gray-700">Type</div>
              <div className="text-gray-600">{metadata.bookType}</div>
            </div>
          </div>

          {metadata.keywords.length > 0 && (
            <>
              <Separator className="my-4" />
              <div>
                <div className="font-medium text-gray-700 mb-2">Keywords</div>
                <div className="flex flex-wrap gap-2">
                  {metadata.keywords.map((keyword, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {keyword}
                    </Badge>
                  ))}
                </div>
              </div>
            </>
          )}
        </CardContent>
      </Card>

      {/* Analysis Stages */}
      <Card>
        <CardHeader>
          <CardTitle className="text-[#2A4759]">Analysis Progress</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {stages.map((stage, index) => (
              <div key={stage.id} className="flex items-start gap-4 p-4 rounded-lg bg-gray-50">
                <div className="flex-shrink-0">{getStatusIcon(stage.status)}</div>
                <div className="flex-1">
                  <div className={`font-medium ${getStatusColor(stage.status)}`}>{stage.name}</div>
                  <div className="text-sm text-gray-600 mt-1">{stage.description}</div>
                  <div className="text-xs text-gray-500 mt-1">Estimated time: {stage.estimatedTime}</div>
                </div>
                <div className="flex-shrink-0">
                  {stage.status === "processing" && (
                    <div className="text-xs text-[#F79B72] font-medium">Processing...</div>
                  )}
                  {stage.status === "completed" && <div className="text-xs text-green-600 font-medium">Complete</div>}
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Results Preview */}
      {isComplete && analysisResults && (
        <Card className="border-green-200 bg-green-50 results-preview">
          <CardHeader>
            <CardTitle className="flex items-center text-green-800">
              <CheckCircle className="h-5 w-5 mr-2" />
              Analysis Results Preview
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="text-center p-4 bg-white rounded-lg">
                <div className="text-3xl font-bold text-[#2A4759] mb-1">{analysisResults.qualityScore}/100</div>
                <div className="text-sm text-gray-600">AI Quality Score</div>
              </div>
              <div className="text-center p-4 bg-white rounded-lg">
                <div className="text-3xl font-bold text-green-600 mb-1">{analysisResults.plagiarismScore}%</div>
                <div className="text-sm text-gray-600">Similarity Detected</div>
              </div>
            </div>
            <div className="mt-4 text-center">
              <p className="text-green-800 text-sm">
                Your comprehensive AI review includes detailed feedback, promotional content, and service
                recommendations.
              </p>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Action Buttons */}
      <div className="flex justify-between">
        <Button variant="outline" onClick={onStartOver}>
          <RotateCcw className="h-4 w-4 mr-2" />
          Start Over
        </Button>

        {isComplete ? (
          <Button onClick={handleViewResults} className="bg-[#F79B72] hover:bg-[#e68a61] text-white px-8">
            <Eye className="h-4 w-4 mr-2" />
            View Complete Results
          </Button>
        ) : (
          <Button disabled className="bg-gray-300 text-gray-500 px-8">
            Analysis in Progress...
          </Button>
        )}
      </div>
    </div>
  )
}
